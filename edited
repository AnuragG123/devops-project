import boto3
from datetime import datetime, timedelta

def lambda_handler(event, context):  # Lambda handler function
    bucket_names = [event['bucket']]
    prefix = event['prefix']
    older_than_years = event.get('older_than_years', 8)
    
    s3 = boto3.client('s3')
    deleted_objects = []

    # Calculate cutoff date
    cutoff_date = datetime.now() - timedelta(days=older_than_years*365)

    for bucket_name in bucket_names:
        # List objects in the bucket with the given prefix
        response = s3.list_objects_v2(Bucket=bucket_name, Prefix=prefix)

        # Iterate through objects and delete those older than cutoff date
        if 'Contents' in response:
            for obj in response['Contents']:
                key = obj['Key']
                # Split the key by '/' to separate folder names
                parts = key.split('/')
                # Check if the key has expected parts
                if len(parts) >= 2:
                    folder_year = parts[-2]  # Get the second last part which should be the folder year
                    try:
                        folder_date = datetime.strptime(folder_year, "%Y")
                        if folder_date < cutoff_date:
                            print(f"Deleting object: {key}")
                            s3.delete_object(Bucket=bucket_name, Key=key)
                            deleted_objects.append(key)
                    except ValueError:
                        # Skip if folder_year is not a valid date
                        pass
    
    return {
        "deleted_objects": deleted_objects
    }

# Example usage
if __name__ == "__main__":
    # For local testing
    event = {
        "bucket": "anuragwarangal",
        "prefix": "converted/",
        "older_than_years": 8
    }
    response = lambda_handler(event, None)
    deleted_objects = response.get('deleted_objects', [])
    if deleted_objects:
        print("Deleted objects:")
        for obj in deleted_objects:
            print(obj)
    else:
        print("No objects deleted.")
